/*
*****************************************************************************
    ___  _                                        _						
   / __)| |                _     _           _   | |						
 _| |__ | |  _____  _   _ | |___| | ____   _| |_ | |__						
(_   __)| | | ___ |( \ / )|  _____||  _ \ (_   _)|  _ \		 __    __  ____ 
  | |   | | | ____| ) X (  \ \____ | | | |  | |_ | | | |	(  )  (  )(  _ \
  |_|    \_)|_____)(_/ \_)  \_____)|_| |_|   \__)|_| |_|	/ (_/\ )(  ) _ (
					A FLEXIBLE SYNTHESIZER DEV LIBRARY		\____/(__)(____/
****************************************************************************										
	FILE: flexynth_base.hpp
	VERSION: 0.1
	DATE: Feb 1st, 2019
	AUTHOR: Franco Caspe			

Copyright [2019] [Franco Caspe]
SPDX-License-Identifier: Apache-2.0

*/
/** @file flexynth_base.hpp
    @brief Base class file for the Synthesizer Architecture.
	@author Franco Caspe
	@date Documented - 20 Mar 2019.
*/

/** @dir flexynth      
	@brief Contains the synthesizer architecture and synthesizer component class files.
	@details All the contents of this directory, should be plattform independent.
*/

/** @dir components      
	@brief Contains the synthesizer component class files.
*/

#include "midi_base.hpp"
#include "pb_base.hpp"

#pragma once

/** @brief Synthesizer Scheme 
*/
namespace synth
	{
	/**
	* @todo Engine native samples should be defined in output_controller.
	*/
	typedef int16_t sample_t;
	
	/**
	* The internal sample is the sample width that is generated by the Synthesizer Architecture.
	* It defines its minimum noise floor. (Which will surely be bigger because of its internal algoritms).
	*/
	typedef int64_t internal_sample_t;

	/** @brief Base Class for the Synthesizer Engine

	@details Provides the basic interface intended to be called from the Synthesizer Engine to perform I/O.
	MIDI Messages and Controller Commands are pushed in and samples are obtained as output on a one by one basis.
	*/
	class flexynth_base
		{
		public:
		/**
		* Pushes a MIDI command for processing.
		* Should implement a switch case to activate/deactivate/modify parameters 
		* of the Synthesizer Components and return.
		*/
		virtual void push_midi_cmd(const midi::command_t &cmd) = 0;
		/**
		* Pushes a pushbutton controller command for processing.
		*/
		virtual void push_pb_cmd(const pushbutton::command_t &cmd) = 0;
		
		/**
		* Used to synthesize a sample.
		* Implements the signal path that concatenates all outputs from the Synthesizer Voices.
		* @details Should accumulate the output of all Synthesizer Voices and perform some post-processing after (ex. an Effect).
		* @return Returns a synthesizer-architecture native sample.
		*/		
		virtual synth::sample_t synthesize_sample() = 0;
	
		protected:
		flexynth_base() {}
		};
	}